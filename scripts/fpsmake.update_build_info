#!/bin/bash

SCRIPT_NAME="$(basename "$(test -L "$0" && readlink -e "$0" || echo "$0")")"
SCRIPT_DIR="$(dirname "$(readlink -e ${0})")"
SCRIPT_VERSION="1.0.0"

FPSMAKE_COMMON=${SCRIPT_DIR}/fpsmake.common
if [[ ! -f ${FPSMAKE_COMMON} ]] ; then 
  echo "" 1>&2
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Failed to source/import script '${FPSMAKE_COMMON}'" 1>&2
  echo "" 1>&2
  exit 1
fi

source ${FPSMAKE_COMMON}
[[ -z ${FPS_ROOT_DIR} ]] && fps__init_environment

if [[ -z ${FPS_ROOT_DIR} ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} ] :: Failed to find root directory for this checkout :: Line ${LINENO}" 1>&2
  echo "" 1>&2 
  exit 1
fi

#
# Declare and initialize argument variables
#             
ARG_HELP=
ARG_VERBOSE=0
ARG_DEST_DIR=
ARG_TAG=
ARG_USER=$(whoami)
ARG_HOST=$(hostname)
ARG_TYPE=
ARG_COMPILER=
ARG_LINKAGE=

USAGE_TEXT="VERSION
        ${SCRIPT_NAME} ${SCRIPT_VERSION}

SYNOPSIS
        ${SCRIPT_NAME} <options> [ Destination Directory ]

        This script creates a json encoded summary of build information, then 
        compiles it to a linkable .o file via the fpsmake.elf_tool script.

OPTIONS 
        -h, --help 
            Print this message and exit.

        -v, --verbose 
            Enable verbose output.

        --tag
            Specify the build tag.

        --compiler
            Specify compiler used for this build.
    
        --type
            Specify the build type ( optimized, debug ).
    
        --linkage
            Specify the default linkage for this build (static, shared).

        --user  ( Default: ${ARG_USER} ) 
            Specify the user associated with this build.
  
        --host  ( Default: ${ARG_HOST} ) 
            Specify the host that executed this build.

EXAMPLE 
        fpsmake.update_build_info --compiler gcc-4.8.4
                                  --tag      B001 
                                  --type     debug 
                                  --linkage  static
                                  /home/blake/fps_platform/build/master.debug.static
"

#
# If no command line arguments are provided, display help
#
if [[ ${#} -lt 1 ]] ; then echo -e "${USAGE_TEXT}" ; exit 0 ; fi

#
# Import command line arguments via 'getopt'
#
ARG_SUMMARY=`\
getopt -o     hv \
       --long help,verbose,tag:,type:,compiler:,linkage:,user:,host: \
       -n     "${SCRIPT_NAME}" -- "${@}" \
`
if [[ ${?} != 0 ]] ; then 
  echo "" 1>&2
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Failed to parse command line arguments :: Line ${LINENO}" 1>&2 
  echo "" 1>&2
  exit 1
fi

eval set -- "${ARG_SUMMARY}"
while true ; do 
  case "${1}" in 
    -h  | --help     ) ARG_HELP=1 ; break ;;
    -v  | --verbose  ) ARG_VERBOSE=$((${ARG_VERBOSE} + 1)) ; shift ;;
          --tag      ) ARG_TAG=${2}  ; shift 2 ;;
          --type     ) ARG_TYPE=${2} ; shift 2 ;;
          --host     ) ARG_HOST=${2} ; shift 2 ;;
          --user     ) ARG_USER=${2} ; shift 2 ;;
          --compiler ) ARG_COMPILER=${2} ; shift 2 ;;
          --linkage  ) ARG_LINKAGE=${2} ; shift 2 ;;
    --               ) shift ; break ;; 
    *                ) shift ;;
  esac
done

# Import the positional input file argument
if [[ ${#} -lt 1 ]] ; then 
  echo "" 1>&2
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Destination directory not specified."
  echo "" 1>&2
  exit 1
fi

ARG_DEST_DIR=${1}
shift 

#
# Stash any remaining unhandled command line arguments in ARG_EXTRA.
# 
ARG_EXTRA="${@}"


BUILD_INFO_ROOT=fps_build_info
ARG_JSON_FILE=${BUILD_INFO_ROOT}
ARG_ELF_FILE=${BUILD_INFO_ROOT}.o

if [[ "${ARG_VERBOSE}" -gt 0 ]] ; then 
  echo "[ ${SCRIPT_NAME} ]"
  echo "|"
  echo "|--[ Build Tag     ] => [ ${ARG_TAG} ]"
  echo "|--[ Build Type    ] => [ ${ARG_TYPE} ]"
  echo "|--[ Build Linkage ] => [ ${ARG_LINKAGE} ]"
  echo "|--[ Build Host    ] => [ ${ARG_HOST} ]"
  echo "|--[ Build User    ] => [ ${ARG_USER} ]"
  echo "|--[ Compiler      ] => [ ${ARG_COMPILER} ]"
  echo "|--[ Destination   ] => [ ${ARG_DEST_DIR} ]"
  echo "|  |--[ JSON       ] => [ ${ARG_JSON_FILE} ]"
  echo "|  |--[ ELF        ] => [ ${ARG_ELF_FILE} ]"
  echo "|" 
fi

#
# Verify all required options are provided
#
if [[ -z ${ARG_DEST_DIR} ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Destination dir not provided via command line."
  echo "" 1>&2 
  exit 1
fi

if [[ -z ${ARG_TYPE} ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Manditory argument --type not found."
  echo "" 1>&2 
  exit 1
fi

if [[ -z ${ARG_TAG} ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Manditory argument --tag not found."
  echo "" 1>&2 
  exit 1
fi

if [[ -z ${ARG_COMPILER} ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Manditory argument --compiler not found."
  echo "" 1>&2 
  exit 1
fi

#
# Change to our destination directory
#
pushd ${ARG_DEST_DIR} &> /dev/null
rm -f ${ARG_JSON_FILE} ${ARG_ELF_FILE} 

touch ${ARG_JSON_FILE} 
if [[ ${?} -ne 0 ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Failed to create JSON file ${ARG_DEST_DIR}/${ARG_JSON_FILE}."
  echo "" 1>&2 
  pushd &> /dev/null
  exit 1
fi

touch ${ARG_ELF_FILE} 
if [[ ${?} -ne 0 ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} ] :: ERROR :: Failed to create ELF file ${ARG_DEST_DIR}/${ARG_ELF_FILE}."
  echo "" 1>&2 
  pushd &> /dev/null
  exit 1
fi

ARG_TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%s %Z")

BUILD_INFO_TEXT="
{ \"build_info\" : 
   { \"tag\"       : \"${ARG_TAG}\" 
   , \"timestamp\" : \"${ARG_TIMESTAMP}\"
   , \"user\"      : \"${ARG_USER}\" 
   , \"host\"      : \"${ARG_HOST}\" 
   , \"type\"      : \"${ARG_TYPE}\"
   , \"linkage\"   : \"${ARG_LINKAGE}\"
   , \"compiler\"  : \"${ARG_COMPILER}\" 
   }
}"

#[[ ${ARG_VERBOSE} -gt 0 ]] && \
#  echo "[ ${SCRIPT_NAME} ] :: Writing JSON intermediary file."

echo -e "${BUILD_INFO_TEXT}" > ${ARG_JSON_FILE}

#[[ ${ARG_VERBOSE} -gt 0 ]] && \
#  echo -e "${BUILD_INFO_TEXT}"

#[[ ${ARG_VERBOSE} -gt 0 ]] && \
#  echo "[ ${SCRIPT_NAME} ] :: Compiling JSON intermediary to ELF format."

${SCRIPT_DIR}/fpsmake.elf_tool -o ${ARG_ELF_FILE} ${ARG_JSON_FILE} 

if [[ ${?} -ne 0 || ! -f ${ARG_ELF_FILE} ]] ; then 
  echo "" 1>&2 
  echo "[ ${SCRIPT_NAME} :: ERROR :: Failed to compile JSON to ELF."
  echo "" 1>&2 
  pushd &> /dev/null
  exit 1 
fi

echo "|--[ SUCCESS ]"
echo ""

pushd &> /dev/null

